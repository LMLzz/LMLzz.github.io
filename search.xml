<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>using namespace std详解 &amp;&amp; namespace(名字空间)探究</title>
      <link href="/2019/08/25/using-namespace-std%E8%AF%A6%E8%A7%A3-namespace-%E5%90%8D%E5%AD%97%E7%A9%BA%E9%97%B4-%E6%8E%A2%E7%A9%B6/"/>
      <url>/2019/08/25/using-namespace-std%E8%AF%A6%E8%A7%A3-namespace-%E5%90%8D%E5%AD%97%E7%A9%BA%E9%97%B4-%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p>在写C++时，经常在各种文件里看到这样一行代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>之前也略微了解过，加上这行代码是为了使用在std名字空间中定义好的C++标识符，但是一直对此一知半解，为什么写代码的时候需要加上“using namespace std;”，今天想探究清楚这个问题。</p><h3 id="为什么要使用“using-namepace-std-”"><a href="#为什么要使用“using-namepace-std-”" class="headerlink" title="为什么要使用“using namepace std;”?"></a>为什么要使用“using namepace std;”?</h3><h4 id="C-新旧标准"><a href="#C-新旧标准" class="headerlink" title="C++新旧标准"></a>C++新旧标准</h4><p>C++标准类库在C99版本修订时，为了和C语言区分开并且正确的使用名字空间，明确提出不再支持.h结尾的头文件。例如C99之后，C++对于&lt;iostream.h&gt;头文件不再维护，最新版本仅支持维护&lt;iostream&gt;头文件。</p><p>C++旧的标准将标准类库声明在带.h后缀的头文件里，定义在<strong>全局空间</strong>内，因此可以直接使用标准库定义的类/函数标识符。此时使用.h文件，就与C语言类似，举个例子(这个例子是我自己的理解，但是并不能编译通过，毕竟这是20年前的写法):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的最新的g++编译器不再支持.h的头文件格式，上面那段代码在最新的g++编译器（version-7.4.0）下，编译是不通过的。报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lml@lml-null:~/WorkSpace/test$ g++ main.cpp -o main</span><br><span class="line">main.cpp:8:10: fatal error: iostream.h: 没有那个文件或目录</span><br><span class="line"><span class="meta"> #</span><span class="bash">include &lt;iostream.h&gt;</span></span><br><span class="line">          ^~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line"></span><br><span class="line">lml@lml-null:~/WorkSpace/test$ g++ --version</span><br><span class="line">g++ (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br></pre></td></tr></table></figure><h4 id="C99标准"><a href="#C99标准" class="headerlink" title="C99标准"></a>C99标准</h4><p>C99及其以后的标准，不再支持.h的头文件。此时仍然在头文件中进行声明工作，C++标准程序库中的所有标识符都被定义于一个名为<strong>std</strong>的<strong>namespace</strong>中，而不是像之前那样，定义在<strong>全局空间</strong>内。</p><p>此时如果想要使用标准库定义的类或者功能函数如<strong>cout</strong>，则需要使用<strong>using namespace std</strong>，因为需要使用的标准库中的标识符均在<strong>std</strong>此名字空间中定义。</p><p>如果不使用这行代码，如编译如下代码main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则会报错如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lml@lml-null:~/WorkSpace/test$ g++ -o main main.cpp </span><br><span class="line">main.cpp: In function ‘int main()’:</span><br><span class="line">main.cpp:<span class="number">11</span>:<span class="number">5</span>: error: ‘<span class="built_in">cout</span>’ was <span class="keyword">not</span> declared in <span class="keyword">this</span> scope</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     ^~~~</span><br><span class="line">main.cpp:<span class="number">11</span>:<span class="number">5</span>: note: suggested alternative:</span><br><span class="line">In file included from main.cpp:<span class="number">8</span>:<span class="number">0</span>:</span><br><span class="line">/usr/include/c++/<span class="number">7</span>/iostream:<span class="number">61</span>:<span class="number">18</span>: note:   ‘<span class="built_in">std</span>::<span class="built_in">cout</span>’</span><br><span class="line">   <span class="keyword">extern</span> ostream <span class="built_in">cout</span>;  <span class="comment">/// Linked to standard output</span></span><br><span class="line">                  ^~~~</span><br><span class="line">main.cpp:<span class="number">11</span>:<span class="number">30</span>: error: ‘<span class="built_in">endl</span>’ was <span class="keyword">not</span> declared in <span class="keyword">this</span> scope</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                              ^~~~</span><br><span class="line">main.cpp:<span class="number">11</span>:<span class="number">30</span>: note: suggested alternative:</span><br></pre></td></tr></table></figure><p>从上面的报错信息中可以看出，cout是在&lt;iostream&gt;中进行声明的，<strong><em>extern ostream cout;</em></strong>但时由于未告知程序cout的所处的namespace，所以报错。</p><h3 id="namespace-名字空间-探究"><a href="#namespace-名字空间-探究" class="headerlink" title="namespace(名字空间)探究"></a>namespace(名字空间)探究</h3><p>命名空间（namespace）是一种描述逻辑分组的机制，可以将按某些标准在逻辑上属于同一个集团的声明放在同一个命名空间中。[1]</p><p>原来C++标识符的作用域分成三级：代码块（{……}，如复合语句和函数体）、类和全局。现在，在其中的类和全局之间，标准C++又添加了命名空间这一个作用域级别，namespace主要是用来解决命名冲突问题的。C ++标准规范中对namespace的定义如下[2]：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unnamed-<span class="keyword">namespace</span>-definition:</span><br><span class="line">     <span class="keyword">namespace</span> &#123; <span class="keyword">namespace</span>-body &#125;</span><br></pre></td></tr></table></figure><p>命名空间可以是全局的，也可以位于另一个命名空间之中，但是不能位于类和代码块中。所以，在命名空间中声明的名称（标识符），默认具有外部链接特性（除非它引用了常量）。</p><p>在所有命名空间之外，还存在一个全局命名空间，它对应于文件级的声明域。因此，在命名空间机制中，原来的全局变量，现在被认为位于全局命名空间中。</p><p>标准C++库（不包括标准C库）中所包含的所有内容（包括常量、变量、结构、类和函数等）都被定义在命名空间std（standard标准）中了。</p><h4 id="定义自己的namespace"><a href="#定义自己的namespace" class="headerlink" title="定义自己的namespace"></a>定义自己的namespace</h4><p>namespace的定义使用<strong>namespace</strong>,后面跟命名空间的名称：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> namespace_name&#123;</span><br><span class="line"><span class="comment">//详细代码</span></span><br><span class="line">    <span class="keyword">int</span> PI = <span class="number">3.14</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用带有命名空间的函数或变量，需要在前面加上命名空间的名称:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namespace_name::code; <span class="comment">//code可以为变量或者函数等实体定义</span></span><br></pre></td></tr></table></figure><p>一个实例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 第一个命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> grade_1 &#123;</span><br><span class="line"><span class="keyword">int</span> student_number = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"grade_1"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二个命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> grade_2 &#123;</span><br><span class="line"><span class="keyword">int</span> student_number = <span class="number">90</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"grade_2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用第一个命名空间中的函数</span></span><br><span class="line">grade_1::func();</span><br><span class="line"><span class="comment">// 调用第二个命名空间中的函数</span></span><br><span class="line">grade_2::func(); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的执行结果为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grade_1</span><br><span class="line">grade_2</span><br></pre></td></tr></table></figure><h4 id="关于namespace的一些代码建议"><a href="#关于namespace的一些代码建议" class="headerlink" title="关于namespace的一些代码建议"></a>关于namespace的一些代码建议</h4><p>[1]<a href="https://blog.csdn.net/touzani/article/details/1637776" target="_blank" rel="noopener">https://blog.csdn.net/touzani/article/details/1637776</a></p><p>[2]<a href="https://blog.csdn.net/Bruce_0712/article/details/53644809" target="_blank" rel="noopener">https://blog.csdn.net/Bruce_0712/article/details/53644809</a></p><p>[3]<a href="https://www.runoob.com/cplusplus/cpp-namespaces.html" target="_blank" rel="noopener">https://www.runoob.com/cplusplus/cpp-namespaces.html</a></p><p>[4]<a href="https://www.zhihu.com/question/26911239/answer/51503880" target="_blank" rel="noopener">https://www.zhihu.com/question/26911239/answer/51503880</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/25/hello-world/"/>
      <url>/2019/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>This is my first blog in this website. I will test the syntax of Markdown.</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h3 id="Test-Hyperlink"><a href="#Test-Hyperlink" class="headerlink" title="Test Hyperlink"></a>Test Hyperlink</h3><p>the google url is : <a href="https://www.google.com.hk" target="_blank" rel="noopener">google</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the google url is : [google](https://www.google.com.hk)</span><br></pre></td></tr></table></figure><h3 id="Test-Bash"><a href="#Test-Bash" class="headerlink" title="Test Bash"></a>Test Bash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> HelloWorld</span><br></pre></td></tr></table></figure><h3 id="Test-C"><a href="#Test-C" class="headerlink" title="Test C++"></a>Test C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Test-Font"><a href="#Test-Font" class="headerlink" title="Test Font"></a>Test Font</h3><p><strong>这是加粗的字体</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的字体**</span><br></pre></td></tr></table></figure><p><em>这是倾斜的字体</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*这是倾斜的字体*</span><br></pre></td></tr></table></figure><p><strong><em>这是倾斜加粗的字体</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***这是倾斜加粗的字体***</span><br></pre></td></tr></table></figure><p><del>这是加删除的字体</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~这是加删除的字体~~</span><br></pre></td></tr></table></figure><h3 id="Test-Split"><a href="#Test-Split" class="headerlink" title="Test Split"></a>Test Split</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="Test-Table"><a href="#Test-Table" class="headerlink" title="Test Table"></a>Test Table</h3><table><thead><tr><th>姓名</th><th>性别</th><th>评价</th></tr></thead><tbody><tr><td>刘备</td><td>男</td><td>喜欢哭</td></tr><tr><td>关羽</td><td>男</td><td>义薄云天</td></tr><tr><td>张飞</td><td>男</td><td>勇冠三军</td></tr><tr><td><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 姓名 | 性别 | 评价|</span><br><span class="line">| ---- | ---- | ----|</span><br><span class="line">| 刘备 | 男 | 喜欢哭 |</span><br><span class="line">| 关羽 | 男 | 义薄云天 |</span><br><span class="line">| 张飞 | 男 | 勇冠三军 |</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr></tbody></table><h3 id="Test-Reference"><a href="#Test-Reference" class="headerlink" title="Test Reference"></a>Test Reference</h3><blockquote><p>这是引用的内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 琐碎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discard</title>
      <link href="/2019/06/10/Discard/"/>
      <url>/2019/06/10/Discard/</url>
      
        <content type="html"><![CDATA[<p>Storage system optimization.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
